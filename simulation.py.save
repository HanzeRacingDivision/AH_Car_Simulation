import pygame
import numpy as np

pygame.init()

class carSim():

	def __init__(self, x, y, velX, velY, angle):
		carSimImg = pygame.image.load('big-car.png')
		self.x = x
		self.y = y
		self.velX = velX
		self.velY = velY
		self.angle = angle%360
		self.vel = 0.32
		self.angVel = 1.5
		self.state = (self.x,self.y,self.velX,self.velY,self.angle)

	def manifest(self, window):
		carSimImg = pygame.image.load('racing-car.png')
		sprite = pygame.transform.rotate(carSimImg, self.angle)
		width = int(sprite.get_width())
		height = int(sprite.get_height())
		window.blit(sprite, (self.x - width/2, self.y - height/2))

	def drive(self):
		decay = 0.05
		cutoff = 0.001
		keys = pygame.key.get_pressed()

		if keys[pygame.K_LEFT]:
			self.angle += self.angVel
		if keys[pygame.K_RIGHT]:
			self.angle -= self.angVel
		if keys[pygame.K_SPACE]:
			self.velX += self.vel*(np.cos(self.angle * 3.14159/180))
			self.velY += self.vel*(-np.sin(self.angle * 3.14159/180))


		if abs(self.velX) > cutoff:
			self.velX -= decay*self.velX
		else:
			self.velX = 0
		if abs(self.velY) > cutoff:
			self.velY -= decay*self.velY
		else:
			self.velY = 0

		self.x += self.velX
		self.y += self.velY

	def update(self):
		self.state = (self.x, self.y, self.velX, self.velY, self.angle)

def genGrid(XD, YD, gap, window, colour):
	for i in range(0,XD,gap):
		pygame.draw.line(window, colour, (i,0), (i,YD), 1)
	for j in range(0,YD,gap):
		pygame.draw.line(window, colour, (0,j), (XD,j), 1)

def updateWindow(window, colour1, colour2,  object, XD, YD):
	window.fill(colour1)
	genGrid(XD,YD,15,window,colour2)
	object.manifest(window)
	pygame.display.update()
